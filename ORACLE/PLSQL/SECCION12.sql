/******************************************************************************/
/***** PACKAGES DE PL/SQL *****/
CREATE OR REPLACE PACKAGE PACK1
IS
  V1 NUMBER;
  V2 VARCHAR2(100);
END;

SET SERVEROUTPUT ON;

BEGIN
  PACK1.V1 := 100;
  PACK1.V2 := 'PROGRAMACION BD';
  DBMS_OUTPUT.PUT_LINE(PACK1.V1);
  DBMS_OUTPUT.PUT_LINE(PACK1.V2);
END;

/***** AMBITO DE LAS VARIABLES PACKAGES DE PL/SQL *****/
CREATE OR REPLACE PACKAGE PACK1
IS
  V1 NUMBER := 10;
  V2 VARCHAR2(100);
END;

SET SERVEROUTPUT ON;

BEGIN
  PACK1.V1 := PACK1.V1+10;
  PACK1.V2 := 'PROGRAMACION BD';
  DBMS_OUTPUT.PUT_LINE(PACK1.V1);
  DBMS_OUTPUT.PUT_LINE(PACK1.V2);
END;

/***** CREAR UN CUERPO DE UN PACKAGE DE PL/SQL *****/
-- CREANDO LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE PACK1
IS
  PROCEDURE CONVERT (NAME VARCHAR2, CONVERSION_TYPE CHAR);
END;
/

-- CREANDO EL CUERPO (BODY) DEL PACKAGE
-- REPROGRAMAR LOS PROCESOS CREADOS EN LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE BODY PACK1
IS
  -- SOLO SE UTILIZARA DENTRO DEL PROCEDIMIENTO CONVERT, LO CUAL NO SERA PUBLICA LA FUNCION, POR ESO NO SE AGREGO EN LA CABECERA DEL PACKAGE
  FUNCTION UP(NAME VARCHAR2)
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN UPPER(NAME);
  END UP;
  
  -- SOLO SE UTILIZARA DENTRO DEL PROCEDIMIENTO CONVERT, LO CUAL NO SERA PUBLICA LA FUNCION, POR ESO NO SE AGREGO EN LA CABECERA DEL PACKAGE
  FUNCTION DO(NAME VARCHAR2)
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN LOWER(NAME);
  END DO;
  
  -- ESTE PROCEDIMIENTO SE UTILIZARA DE FORMA PUBLICA, POR ESO SE AGREGO EN LA CABECERA DEL PACKAGE
  PROCEDURE CONVERT(NAME VARCHAR2, CONVERSION_TYPE CHAR)
  IS
  BEGIN
    IF CONVERSION_TYPE='U' THEN
      DBMS_OUTPUT.PUT_LINE(UP(NAME));
    ELSIF CONVERSION_TYPE='L' THEN
      DBMS_OUTPUT.PUT_LINE(DO(NAME));
    ELSE
      DBMS_OUTPUT.PUT_LINE('EL PARAMETRO DEBE SER U o L');
    END IF;
  END CONVERT;
  
END PACK1;
/

-- EJECUTANDO EL PROCEDIMIENTO
SET SERVEROUTPUT ON;

BEGIN
  PACK1.CONVERT('Estoy Programando', 'L');
END;

/***** USO DE FUNCIONES DE PACKAGE EN SQL *****/
-- CREANDO LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE PACK1
IS
  PROCEDURE PR_CONVERT(NAME VARCHAR2, CONVERSION_TYPE CHAR);
  FUNCTION FN_CONVERT(NAME VARCHAR2, CONVERSION_TYPE CHAR) RETURN VARCHAR2;
END;

-- CREANDO EL CUERPO (BODY) DEL PACKAGE
-- REPROGRAMAR LOS PROCESOS CREADOS EN LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE BODY PACK1
IS
  -- SOLO SE UTILIZARA DENTRO DEL PROCEDIMIENTO CONVERT, LO CUAL NO SERA PUBLICA LA FUNCION, POR ESO NO SE AGREGO EN LA CABECERA DEL PACKAGE
  FUNCTION UP(NAME VARCHAR2)
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN UPPER(NAME);
  END UP;
  
  -- SOLO SE UTILIZARA DENTRO DEL PROCEDIMIENTO CONVERT, LO CUAL NO SERA PUBLICA LA FUNCION, POR ESO NO SE AGREGO EN LA CABECERA DEL PACKAGE
  FUNCTION DO(NAME VARCHAR2)
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN LOWER(NAME);
  END DO;
  
  -- ESTE PROCEDIMIENTO SE UTILIZARA DE FORMA PUBLICA, POR ESO SE AGREGO EN LA CABECERA DEL PACKAGE
  PROCEDURE PR_CONVERT(NAME VARCHAR2, CONVERSION_TYPE CHAR)
  IS
  BEGIN
    IF CONVERSION_TYPE='U' THEN
      DBMS_OUTPUT.PUT_LINE(UP(NAME));
    ELSIF CONVERSION_TYPE='L' THEN
      DBMS_OUTPUT.PUT_LINE(DO(NAME));
    ELSE
      DBMS_OUTPUT.PUT_LINE('EL PARAMETRO DEBE SER U o L');
    END IF;
  END PR_CONVERT;
  
  -- ESTA FUNCION SE UTILIZARA DE FORMA PUBLICA, POR ESO SE AGREGO EN LA CABECERA DEL PACKAGE
  FUNCTION FN_CONVERT(NAME VARCHAR2, CONVERSION_TYPE CHAR)
  RETURN VARCHAR2
  IS
  BEGIN
    IF CONVERSION_TYPE='U' THEN
      RETURN UP(NAME);
    ELSIF CONVERSION_TYPE='L' THEN
      RETURN DO(NAME);
    ELSE
      RETURN 'EL PARAMETRO DEBE SER U o L';
    END IF;
  END FN_CONVERT;
  
END PACK1;

-- EJECUTANDO LA FUNCION DENTRO DEL PLSQL
SET SERVEROUTPUT ON;

DECLARE
  V1 VARCHAR2(100);
BEGIN
  V1 := PACK1.FN_CONVERT('Estoy Programando', 'L');
  DBMS_OUTPUT.PUT_LINE(V1);
END;

-- EJECUTANDO LA FUNCION DENTRO DEL SQL
SELECT FIRST_NAME, PACK1.FN_CONVERT(FIRST_NAME,'U') AS MAYUSCULA, PACK1.FN_CONVERT(FIRST_NAME,'L') AS MINUSCULA FROM EMPLOYEES;

/***** SOBRECARGA DE PROCEDIMIENTOS EN PLSQL *****/
-- CREANDO LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE PKG_PACK2
IS
  FUNCTION COUNT_EMPLOYEES(ID NUMBER) RETURN NUMBER;
  FUNCTION COUNT_EMPLOYEES(ID VARCHAR2) RETURN NUMBER;
END;

-- CREANDO EL CUERPO (BODY) DEL PACKAGE
-- REPROGRAMAR LOS PROCESOS CREADOS EN LA CABECERA DEL PACKAGE
CREATE OR REPLACE PACKAGE BODY PKG_PACK2
IS
  FUNCTION COUNT_EMPLOYEES(ID NUMBER)
  RETURN NUMBER
  IS
  X NUMBER;
  BEGIN
    SELECT COUNT(*) INTO X FROM EMPLOYEES WHERE DEPARTMENT_ID=ID;
    RETURN X;
  END COUNT_EMPLOYEES;
  
  FUNCTION COUNT_EMPLOYEES(ID VARCHAR2)
  RETURN NUMBER
  IS
  X NUMBER;
  BEGIN
    SELECT COUNT(*) INTO X FROM EMPLOYEES E, DEPARTMENTS D 
    WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID AND D.DEPARTMENT_NAME=ID;
    RETURN X;
  END COUNT_EMPLOYEES;
  
END PKG_PACK2;

-- EJECUTANDO LA FUNCION DENTRO DEL PLSQL
SET SERVEROUTPUT ON;

BEGIN
  DBMS_OUTPUT.PUT_LINE(PKG_PACK2.COUNT_EMPLOYEES(50));
  DBMS_OUTPUT.PUT_LINE(PKG_PACK2.COUNT_EMPLOYEES('Marketing'));
END;

/***** PAQUETES PREDEFINIDOS DE ORACLE *****/

/***** PAQUETE UTL_FILE EN PL/SQL *****/
-- DAR PERMISOS A USUARIO "HR", EJECUTANDO LO SIGUIENTE CON SUPER USUARIO "SYS"
GRANT CREATE ANY DIRECTORY TO HR;
GRANT EXECUTE ON SYS.UTL_FILE TO HR;

-- CREANDO DIRECTORY
CREATE OR REPLACE DIRECTORY EXERCISES AS '\home\jreyes\Documentos\BBDD\ORACLE\PLSQL\SECCION_12_DIRECTORY\EXERCISES\';

-- CONSUTA PROCEDIMIENTOS A UTILIZAR
DESC UTL_FILE;
select owner, object_type from all_objects where object_name = 'UTL_FILE';
SELECT * FROM all_directories WHERE directory_name = 'EXERCISES';
SELECT * FROM dba_tab_privs WHERE table_name = 'UTL_FILE';



-- CREANDO EL PROCEDIMIENTO
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE READ_FILE
IS
  STRING  VARCHAR2(32767);
  VFILE   UTL_FILE.FILE_TYPE;
BEGIN
  -- OPEN FILE
  VFILE := UTL_FILE.FOPEN('EXERCISES','F1.txt','R');
  
  LOOP
    BEGIN
      -- READ FILE
      UTL_FILE.GET_LINE(VFILE,STRING);
      DBMS_OUTPUT.PUT_LINE(STRING);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        EXIT;
    END;
  END LOOP;
  -- CLOSE FILE
  UTL_FILE.FCLOSE(VFILE);
END;

-- EJECUTANDO EL PROCEDOMIENTO
BEGIN
  READ_FILE();
END;